{
	"jobConfig": {
		"name": "movie-data-project",
		"description": "",
		"role": "arn:aws:iam::683934273415:role/service-role/AWSGlueServiceRole-1",
		"command": "glueetl",
		"version": "4.0",
		"runtime": null,
		"workerType": "G.1X",
		"numberOfWorkers": "2",
		"maxCapacity": 2,
		"maxRetries": 0,
		"timeout": 2880,
		"maxConcurrentRuns": 1,
		"security": "none",
		"scriptName": "movie-data-project.py",
		"scriptLocation": "s3://aws-glue-assets-683934273415-ap-south-1/scripts/",
		"language": "python-3",
		"jobParameters": [
			{
				"key": "--JOB_NAME",
				"value": "movies_data_quality",
				"existing": false
			}
		],
		"tags": [],
		"jobMode": "VISUAL_MODE",
		"createdOn": "2023-09-28T06:24:21.181Z",
		"developerMode": false,
		"connectionsList": [
			"glue2redshift"
		],
		"temporaryDirectory": "s3://aws-glue-assets-683934273415-ap-south-1/temporary/",
		"logging": true,
		"glueHiveMetastore": true,
		"etlAutoTuning": false,
		"metrics": true,
		"spark": true,
		"bookmark": "job-bookmark-enable",
		"sparkPath": "s3://aws-glue-assets-683934273415-ap-south-1/sparkHistoryLogs/",
		"flexExecution": false,
		"minFlexWorkers": null,
		"pythonPath": ""
	},
	"dag": {
		"node-1695881254415": {
			"nodeId": "node-1695881254415",
			"dataPreview": false,
			"previewAmount": 0,
			"inputs": [
				"node-1695881254287"
			],
			"name": "failed_output",
			"generatedNodeName": "failed_output_node1695881254415",
			"classification": "Transform",
			"type": "SelectFromCollection",
			"index": 0,
			"parentsValid": true,
			"calculatedType": "",
			"codeGenVersion": 2
		},
		"node-1695881914925": {
			"nodeId": "node-1695881914925",
			"dataPreview": false,
			"previewAmount": 0,
			"inputs": [
				"node-1695881702941"
			],
			"name": "Amazon Redshift",
			"generatedNodeName": "AmazonRedshift_node1695881914925",
			"classification": "DataSink",
			"type": "AmazonRedshift",
			"streamingBatchInterval": 100,
			"data": {
				"accessType": "catalog",
				"sourceType": "table",
				"connection": {
					"value": "glue2redshift",
					"label": "glue2redshift",
					"description": "-"
				},
				"schema": null,
				"catalogDatabase": {
					"value": "imdb-rating",
					"label": "imdb-rating",
					"description": "-"
				},
				"catalogRedshiftTable": "imdb_movies_rating",
				"catalogRedshiftSchema": "imdb",
				"table": null,
				"catalogTable": {
					"value": "dev_imdb_imdb_movies_rating",
					"label": "dev_imdb_imdb_movies_rating",
					"description": "-"
				},
				"tempDir": "s3://aws-glue-assets-683934273415-ap-south-1/temporary/",
				"iamRole": {
					"value": null,
					"label": "AmazonRedshift-CommandsAccessRole-20230924T161616",
					"description": "No description available."
				},
				"sampleQuery": null,
				"preAction": null,
				"postAction": null,
				"action": "append",
				"tableSchema": [
					{
						"value": "poster_link",
						"label": "poster_link",
						"description": "VARCHAR"
					},
					{
						"value": "series_title",
						"label": "series_title",
						"description": "VARCHAR"
					},
					{
						"value": "released_year",
						"label": "released_year",
						"description": "VARCHAR"
					},
					{
						"value": "certificate",
						"label": "certificate",
						"description": "VARCHAR"
					},
					{
						"value": "runtime",
						"label": "runtime",
						"description": "VARCHAR"
					},
					{
						"value": "genre",
						"label": "genre",
						"description": "VARCHAR"
					},
					{
						"value": "imdb_rating",
						"label": "imdb_rating",
						"description": "DOUBLE PRECISION"
					},
					{
						"value": "overview",
						"label": "overview",
						"description": "VARCHAR"
					},
					{
						"value": "meta_score",
						"label": "meta_score",
						"description": "INTEGER"
					},
					{
						"value": "director",
						"label": "director",
						"description": "VARCHAR"
					},
					{
						"value": "star1",
						"label": "star1",
						"description": "VARCHAR"
					},
					{
						"value": "star2",
						"label": "star2",
						"description": "VARCHAR"
					},
					{
						"value": "star3",
						"label": "star3",
						"description": "VARCHAR"
					},
					{
						"value": "star4",
						"label": "star4",
						"description": "VARCHAR"
					},
					{
						"value": "no_of_votes",
						"label": "no_of_votes",
						"description": "INTEGER"
					},
					{
						"value": "gross",
						"label": "gross",
						"description": "VARCHAR"
					}
				],
				"selectedColumns": [],
				"crawlerConnection": "glue2redshift",
				"tablePrefix": null,
				"upsert": false,
				"mergeAction": "simple",
				"mergeWhenMatched": "update",
				"mergeWhenNotMatched": "insert",
				"mergeClause": null,
				"stagingTable": "imdb.imdb_movies_rating_temp_265df8",
				"advancedOptions": []
			},
			"calculatedType": "",
			"codeGenVersion": 2
		},
		"node-1695881164928": {
			"nodeId": "node-1695881164928",
			"dataPreview": false,
			"previewAmount": 0,
			"inputs": [
				"node-1695880720380"
			],
			"name": "Amazon S3",
			"generatedNodeName": "AmazonS3_node1695881164928",
			"classification": "DataSink",
			"type": "S3",
			"streamingBatchInterval": 100,
			"format": "json",
			"compression": "none",
			"path": "s3://imdb-dataquality/rules-outcome/",
			"partitionKeys": [],
			"schemaChangePolicy": {
				"enableUpdateCatalog": false,
				"updateBehavior": null,
				"database": null,
				"table": null
			},
			"updateCatalogOptions": "none",
			"calculatedType": "",
			"codeGenVersion": 2
		},
		"node-1": {
			"nodeId": "node-1",
			"dataPreview": false,
			"previewAmount": 0,
			"inputs": [],
			"name": "S3 bucket",
			"generatedNodeName": "S3bucket_node1",
			"classification": "DataSource",
			"type": "S3",
			"isCatalog": true,
			"database": "imdb-rating",
			"table": "movie_rating_imdb",
			"partitionPredicate": "",
			"additionalOptions": {
				"boundedSize": null,
				"boundedFiles": null,
				"boundedOption": null
			},
			"calculatedType": "CatalogS3DataSource",
			"codeGenVersion": 2
		},
		"node-1695881254414": {
			"nodeId": "node-1695881254414",
			"dataPreview": false,
			"previewAmount": 0,
			"inputs": [
				"node-1695881254287"
			],
			"name": "default_group",
			"generatedNodeName": "default_group_node1695881254414",
			"classification": "Transform",
			"type": "SelectFromCollection",
			"index": 0,
			"parentsValid": true,
			"calculatedType": "",
			"codeGenVersion": 2
		},
		"node-1695880720380": {
			"nodeId": "node-1695880720380",
			"dataPreview": false,
			"previewAmount": 0,
			"inputs": [
				"node-1695880460926"
			],
			"name": "ruleOutcomes",
			"generatedNodeName": "ruleOutcomes_node1695880720380",
			"classification": "Transform",
			"type": "SelectFromCollection",
			"index": 0,
			"parentsValid": true,
			"calculatedType": "",
			"codeGenVersion": 2
		},
		"node-1695881254287": {
			"nodeId": "node-1695881254287",
			"dataPreview": false,
			"previewAmount": 0,
			"inputs": [
				"node-1695880775144"
			],
			"name": "Conditional Router",
			"generatedNodeName": "ConditionalRouter_node1695881254287",
			"classification": "Transform",
			"type": "Route",
			"groupFiltersList": [
				{
					"logicalOperator": "AND",
					"filters": [],
					"groupName": "default_group"
				},
				{
					"logicalOperator": "OR",
					"filters": [
						{
							"operation": "REGEX",
							"negated": false,
							"values": [
								{
									"type": "CONSTANT",
									"value": [
										"Failed"
									]
								},
								{
									"type": "COLUMNEXTRACTED",
									"value": "DataQualityEvaluationResult"
								}
							]
						},
						{
							"operation": "REGEX",
							"negated": false,
							"values": [
								{
									"type": "CONSTANT",
									"value": [
										"failed"
									]
								},
								{
									"type": "COLUMNEXTRACTED",
									"value": "DataQualityEvaluationResult"
								}
							]
						},
						{
							"operation": "REGEX",
							"negated": false,
							"values": [
								{
									"type": "CONSTANT",
									"value": [
										"FAILED"
									]
								},
								{
									"type": "COLUMNEXTRACTED",
									"value": "DataQualityEvaluationResult"
								}
							]
						}
					],
					"groupName": "failed_output"
				}
			],
			"parentsValid": true,
			"calculatedType": "",
			"codeGenVersion": 2
		},
		"node-1695880775144": {
			"nodeId": "node-1695880775144",
			"dataPreview": false,
			"previewAmount": 0,
			"inputs": [
				"node-1695880460926"
			],
			"name": "rowLevelOutcomes",
			"generatedNodeName": "rowLevelOutcomes_node1695880775144",
			"classification": "Transform",
			"type": "SelectFromCollection",
			"index": 0,
			"parentsValid": true,
			"calculatedType": "",
			"codeGenVersion": 2
		},
		"node-1695881567005": {
			"nodeId": "node-1695881567005",
			"dataPreview": false,
			"previewAmount": 0,
			"inputs": [
				"node-1695881254415"
			],
			"name": "Amazon S3",
			"generatedNodeName": "AmazonS3_node1695881567005",
			"classification": "DataSink",
			"type": "S3",
			"streamingBatchInterval": 100,
			"format": "json",
			"compression": "snappy",
			"path": "s3://imdb-dataquality/bad-records/",
			"partitionKeys": [],
			"schemaChangePolicy": {
				"enableUpdateCatalog": false,
				"updateBehavior": null,
				"database": null,
				"table": null
			},
			"updateCatalogOptions": "none",
			"calculatedType": "",
			"codeGenVersion": 2
		},
		"node-1695881702941": {
			"nodeId": "node-1695881702941",
			"dataPreview": false,
			"previewAmount": 0,
			"inputs": [
				"node-1695881254414"
			],
			"name": "Change Schema",
			"generatedNodeName": "ChangeSchema_node1695881702941",
			"classification": "Transform",
			"type": "ApplyMapping",
			"mapping": [
				{
					"toKey": "poster_link",
					"fromPath": [
						"poster_link"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "series_title",
					"fromPath": [
						"series_title"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "released_year",
					"fromPath": [
						"released_year"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "certificate",
					"fromPath": [
						"certificate"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "runtime",
					"fromPath": [
						"runtime"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "genre",
					"fromPath": [
						"genre"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "imdb_rating",
					"fromPath": [
						"imdb_rating"
					],
					"toType": "double",
					"fromType": "double",
					"dropped": false
				},
				{
					"toKey": "overview",
					"fromPath": [
						"overview"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "meta_score",
					"fromPath": [
						"meta_score"
					],
					"toType": "int",
					"fromType": "int",
					"dropped": false
				},
				{
					"toKey": "director",
					"fromPath": [
						"director"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "star1",
					"fromPath": [
						"star1"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "star2",
					"fromPath": [
						"star2"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "star3",
					"fromPath": [
						"star3"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "star4",
					"fromPath": [
						"star4"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "no_of_votes",
					"fromPath": [
						"no_of_votes"
					],
					"toType": "int",
					"fromType": "int",
					"dropped": false
				},
				{
					"toKey": "gross",
					"fromPath": [
						"gross"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": false
				},
				{
					"toKey": "DataQualityRulesPass",
					"fromPath": [
						"DataQualityRulesPass"
					],
					"toType": "array",
					"fromType": "array",
					"dropped": true,
					"children": null
				},
				{
					"toKey": "DataQualityRulesFail",
					"fromPath": [
						"DataQualityRulesFail"
					],
					"toType": "array",
					"fromType": "array",
					"dropped": true,
					"children": null
				},
				{
					"toKey": "DataQualityRulesSkip",
					"fromPath": [
						"DataQualityRulesSkip"
					],
					"toType": "array",
					"fromType": "array",
					"dropped": true,
					"children": null
				},
				{
					"toKey": "DataQualityEvaluationResult",
					"fromPath": [
						"DataQualityEvaluationResult"
					],
					"toType": "string",
					"fromType": "string",
					"dropped": true,
					"children": null
				}
			],
			"parentsValid": true,
			"calculatedType": "",
			"codeGenVersion": 2
		},
		"node-1695880460926": {
			"nodeId": "node-1695880460926",
			"dataPreview": false,
			"previewAmount": 0,
			"inputs": [
				"node-1"
			],
			"name": "Evaluate Data Quality",
			"generatedNodeName": "EvaluateDataQuality_node1695880460926",
			"classification": "Transform",
			"type": "EvaluateDataQualityMultiFrame",
			"ruleset": " Rules = [\r\n          RowCount between 500 and 2000,\r\n        IsComplete \"poster_link\",\r\n        Uniqueness \"poster_link\" > 0.95,\r\n        ColumnLength \"poster_link\" between 108 and 162,\r\n        IsComplete \"series_title\",\r\n        Uniqueness \"series_title\" > 0.95,\r\n        ColumnLength \"series_title\" between 1 and 69,\r\n        IsComplete \"released_year\",\r\n        ColumnValues \"released_year\" in [\"1901\", \"1902\", \"1903\", \"1904\", \"1905\", \"1906\", \"1907\", \"1908\", \"1909\", \"1910\", \"1911\", \"1912\", \"1913\", \"1914\", \"1915\", \"1916\", \"1917\", \"1918\", \"1919\", \"1920\", \"1921\", \"1922\", \"1923\", \"1924\", \"1925\", \"1926\", \"1927\", \"1928\", \"1929\", \"1930\", \"1931\", \"1932\", \"1933\", \"1934\", \"1935\", \"1936\", \"1937\", \"1938\", \"1939\", \"1940\", \"1941\", \"1942\", \"1943\", \"1944\", \"1945\", \"1946\", \"1947\", \"1948\", \"1949\", \"1950\", \"1951\", \"1952\", \"1953\", \"1954\", \"1955\", \"1956\", \"1957\", \"1958\", \"1959\", \"1960\", \"1961\", \"1962\", \"1963\", \"1964\", \"1965\", \"1966\", \"1967\", \"1968\", \"1969\", \"1970\", \"1971\", \"1972\", \"1973\", \"1974\", \"1975\", \"1976\", \"1977\", \"1978\", \"1979\", \"1980\", \"1981\", \"1982\", \"1983\", \"1984\", \"1985\", \"1986\", \"1987\", \"1988\", \"1989\", \"1990\", \"1991\", \"1992\", \"1993\", \"1994\", \"1995\", \"1996\", \"1997\", \"1998\", \"1999\", \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\", \"2021\", \"2022\",\"2023\"],\r\n        ColumnLength \"released_year\" = 4,\r\n        IsComplete \"certificate\",\r\n        ColumnValues \"certificate\" in [\"U\",\"A\",\"UA\",\"R\",\"PG-13\",\"PG\"] with threshold >= 0.91,\r\n        ColumnLength \"certificate\" <= 8,\r\n        IsComplete \"runtime\",\r\n        ColumnLength \"runtime\" between 5 and 8,\r\n        IsComplete \"genre\",\r\n        ColumnLength \"genre\" between 4 and 30,\r\n        IsComplete \"imdb_rating\",\r\n        ColumnValues \"imdb_rating\" between 7 and 10,\r\n        IsComplete \"overview\",\r\n        ColumnLength \"overview\" between 39 and 314,\r\n        Completeness \"meta_score\" >= 0.82,\r\n        StandardDeviation \"meta_score\" between 11.75 and 12.99,\r\n        ColumnValues \"meta_score\" between 27 and 101,\r\n        IsComplete \"director\",\r\n        ColumnLength \"director\" between 6 and 33,\r\n        IsComplete \"star1\",\r\n        ColumnLength \"star1\" between 3 and 26,\r\n        IsComplete \"star2\",\r\n        ColumnLength \"star2\" between 3 and 26,\r\n        IsComplete \"star3\",\r\n        Uniqueness \"star3\" > 0.6,\r\n        ColumnLength \"star3\" between 3 and 28,\r\n        IsComplete \"star4\",\r\n        ColumnLength \"star4\" between 3 and 28,\r\n        IsComplete \"no_of_votes\",\r\n        StandardDeviation \"no_of_votes\" between 310848.53 and 343569.43,\r\n        Uniqueness \"no_of_votes\" > 0.95,\r\n        ColumnValues \"no_of_votes\" between 25087 and 2343111,\r\n        IsComplete \"gross\",\r\n        ColumnLength \"gross\" <= 11  \r\n    ]",
			"output": "EvaluationResults",
			"publishingOptions": {
				"evaluationContext": null,
				"cloudWatchMetricsEnabled": true,
				"resultsS3Prefix": "",
				"resultsPublishingEnabled": true
			},
			"stopJobOnFailureOptions": {},
			"additionalOptions": {
				"performanceTuning.caching": "CACHE_NOTHING"
			},
			"parentsValid": true,
			"calculatedType": "",
			"codeGenVersion": 2
		}
	},
	"hasBeenSaved": false,
	"script": "import sys\nfrom awsglue.transforms import *\nfrom awsglue.utils import getResolvedOptions\nfrom pyspark.context import SparkContext\nfrom awsglue.context import GlueContext\nfrom awsglue.job import Job\nfrom awsglue.dynamicframe import DynamicFrameCollection\nfrom awsgluedq.transforms import EvaluateDataQuality\nfrom awsglue import DynamicFrame\nimport concurrent.futures\nimport re\n\n\nclass GroupFilter:\n    def __init__(self, name, filters):\n        self.name = name\n        self.filters = filters\n\n\ndef apply_group_filter(source_DyF, group):\n    return Filter.apply(frame=source_DyF, f=group.filters)\n\n\ndef threadedRoute(glue_ctx, source_DyF, group_filters) -> DynamicFrameCollection:\n    dynamic_frames = {}\n    with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n        future_to_filter = {\n            executor.submit(apply_group_filter, source_DyF, gf): gf\n            for gf in group_filters\n        }\n        for future in concurrent.futures.as_completed(future_to_filter):\n            gf = future_to_filter[future]\n            if future.exception() is not None:\n                print(\"%r generated an exception: %s\" % (gf, future.exception()))\n            else:\n                dynamic_frames[gf.name] = future.result()\n    return DynamicFrameCollection(dynamic_frames, glue_ctx)\n\n\nargs = getResolvedOptions(sys.argv, [\"JOB_NAME\"])\nsc = SparkContext()\nglueContext = GlueContext(sc)\nspark = glueContext.spark_session\njob = Job(glueContext)\njob.init(args[\"JOB_NAME\"], args)\n\n# Script generated for node S3 bucket\nS3bucket_node1 = glueContext.create_dynamic_frame.from_catalog(\n    database=\"imdb-rating\",\n    table_name=\"movie_rating_imdb\",\n    transformation_ctx=\"S3bucket_node1\",\n)\n\n# Script generated for node Evaluate Data Quality\nEvaluateDataQuality_node1695880460926_ruleset = \"\"\"\n    # Example rules: Completeness \"colA\" between 0.4 and 0.8, ColumnCount > 10\n    # Example rules: Completeness \"colA\" between 0.4 and 0.8, ColumnCount > 10\n     Rules = [\n              RowCount between 500 and 2000,\n            IsComplete \"poster_link\",\n            Uniqueness \"poster_link\" > 0.95,\n            ColumnLength \"poster_link\" between 108 and 162,\n            IsComplete \"series_title\",\n            Uniqueness \"series_title\" > 0.95,\n            ColumnLength \"series_title\" between 1 and 69,\n            IsComplete \"released_year\",\n            ColumnValues \"released_year\" in [\"2014\",\"2004\",\"2009\",\"2016\",\"2013\",\"2001\",\"2006\",\"2007\",\"2015\",\"2012\",\"2010\",\"2019\",\"1993\",\"2017\",\"2003\",\"2008\",\"1995\",\"2000\",\"2018\",\"2002\",\"1997\",\"2011\",\"1998\",\"2005\",\"1999\",\"1994\",\"1962\",\"1973\",\"1987\",\"1992\",\"1979\",\"1991\",\"1988\",\"1960\",\"1982\",\"1989\",\"1967\",\"1996\",\"1984\",\"1985\",\"1957\",\"1975\",\"1986\",\"1971\",\"1990\",\"1972\",\"1980\",\"1968\",\"1976\",\"1940\",\"1966\",\"1959\",\"1964\",\"1978\",\"1955\",\"1948\",\"1974\",\"1954\",\"2020\",\"1956\",\"1951\",\"1963\",\"1953\",\"1946\",\"1939\",\"1961\",\"1983\",\"1950\",\"1944\",\"1952\",\"1981\",\"1958\",\"1965\",\"1949\",\"1938\",\"1970\",\"1977\",\"1933\",\"1942\",\"1969\",\"1935\",\"1931\",\"1925\",\"1945\",\"1927\",\"1934\",\"1941\",\"1947\",\"1932\",\"1928\",\"1930\",\"1937\",\"1926\",\"1922\",\"1921\",\"PG\",\"1924\",\"1943\",\"1920\",\"1936\"],\n            ColumnValues \"released_year\" in [\"2014\",\"2004\",\"2009\",\"2016\",\"2013\",\"2001\",\"2006\",\"2007\",\"2015\",\"2012\",\"2010\",\"2019\",\"1993\",\"2017\",\"2003\",\"2008\",\"1995\",\"2000\",\"2018\",\"2002\",\"1997\",\"2011\",\"1998\",\"2005\",\"1999\",\"1994\",\"1962\",\"1973\",\"1987\",\"1992\",\"1979\",\"1991\",\"1988\",\"1960\",\"1982\",\"1989\",\"1967\",\"1996\",\"1984\",\"1985\",\"1957\",\"1975\",\"1986\",\"1971\",\"1990\",\"1972\",\"1980\",\"1968\",\"1976\",\"1940\",\"1966\",\"1959\",\"1964\",\"1978\",\"1955\",\"1948\",\"1974\",\"1954\",\"2020\",\"1956\",\"1951\",\"1963\",\"1953\"] with threshold >= 0.88,\n            ColumnLength \"released_year\" between 1 and 5,\n            IsComplete \"certificate\",\n            ColumnValues \"certificate\" in [\"U\",\"A\",\"UA\",\"R\",\"\",\"PG-13\",\"PG\"] with threshold >= 0.91,\n            ColumnLength \"certificate\" <= 8,\n            IsComplete \"runtime\",\n            ColumnLength \"runtime\" between 5 and 8,\n            IsComplete \"genre\",\n            ColumnLength \"genre\" between 4 and 30,\n            IsComplete \"imdb_rating\",\n            ColumnValues \"imdb_rating\" between 7 and 10,\n            IsComplete \"overview\",\n            ColumnLength \"overview\" between 39 and 314,\n            Completeness \"meta_score\" >= 0.82,\n            ColumnValues \"meta_score\" in [\"76\",\"90\",\"84\",\"85\",\"86\",\"80\",\"72\",\"73\",\"81\",\"77\",\"82\",\"83\",\"88\",\"78\",\"74\",\"79\",\"75\",\"87\",\"68\",\"94\",\"91\",\"96\",\"71\",\"66\",\"70\",\"69\",\"65\",\"89\",\"93\",\"67\",\"92\",\"64\",\"97\",\"100\",\"95\",\"62\",\"61\"] with threshold >= 0.89,\n            StandardDeviation \"meta_score\" between 11.75 and 12.99,\n            ColumnValues \"meta_score\" between 27 and 101,\n            IsComplete \"director\",\n            ColumnLength \"director\" between 6 and 33,\n            IsComplete \"star1\",\n            ColumnLength \"star1\" between 3 and 26,\n            IsComplete \"star2\",\n            ColumnLength \"star2\" between 3 and 26,\n            IsComplete \"star3\",\n            Uniqueness \"star3\" > 0.6,\n            ColumnLength \"star3\" between 3 and 28,\n            IsComplete \"star4\",\n            ColumnLength \"star4\" between 3 and 28,\n            IsComplete \"no_of_votes\",\n            StandardDeviation \"no_of_votes\" between 310848.53 and 343569.43,\n            Uniqueness \"no_of_votes\" > 0.95,\n            ColumnValues \"no_of_votes\" between 25087 and 2343111,\n            IsComplete \"gross\",\n            ColumnLength \"gross\" <= 11  \n        ]\n\"\"\"\n\nEvaluateDataQuality_node1695880460926 = EvaluateDataQuality().process_rows(\n    frame=S3bucket_node1,\n    ruleset=EvaluateDataQuality_node1695880460926_ruleset,\n    publishing_options={\n        \"dataQualityEvaluationContext\": \"EvaluateDataQuality_node1695880460926\",\n        \"enableDataQualityCloudWatchMetrics\": True,\n        \"enableDataQualityResultsPublishing\": True,\n    },\n    additional_options={\"performanceTuning.caching\": \"CACHE_NOTHING\"},\n)\n\n# Script generated for node ruleOutcomes\nruleOutcomes_node1695880720380 = SelectFromCollection.apply(\n    dfc=EvaluateDataQuality_node1695880460926,\n    key=\"ruleOutcomes\",\n    transformation_ctx=\"ruleOutcomes_node1695880720380\",\n)\n\n# Script generated for node rowLevelOutcomes\nrowLevelOutcomes_node1695880775144 = SelectFromCollection.apply(\n    dfc=EvaluateDataQuality_node1695880460926,\n    key=\"rowLevelOutcomes\",\n    transformation_ctx=\"rowLevelOutcomes_node1695880775144\",\n)\n\n# Script generated for node Conditional Router\nConditionalRouter_node1695881254287 = threadedRoute(\n    glueContext,\n    source_DyF=rowLevelOutcomes_node1695880775144,\n    group_filters=[\n        GroupFilter(\n            name=\"failed_output\",\n            filters=lambda row: (\n                bool(re.match(\"Failed\", row[\"DataQualityEvaluationResult\"]))\n                or bool(re.match(\"failed\", row[\"DataQualityEvaluationResult\"]))\n                or bool(re.match(\"FAILED\", row[\"DataQualityEvaluationResult\"]))\n            ),\n        ),\n        GroupFilter(\n            name=\"default_group\",\n            filters=lambda row: (\n                not (\n                    bool(re.match(\"Failed\", row[\"DataQualityEvaluationResult\"]))\n                    or bool(re.match(\"failed\", row[\"DataQualityEvaluationResult\"]))\n                    or bool(re.match(\"FAILED\", row[\"DataQualityEvaluationResult\"]))\n                )\n            ),\n        ),\n    ],\n)\n\n# Script generated for node failed_output\nfailed_output_node1695881254415 = SelectFromCollection.apply(\n    dfc=ConditionalRouter_node1695881254287,\n    key=\"failed_output\",\n    transformation_ctx=\"failed_output_node1695881254415\",\n)\n\n# Script generated for node default_group\ndefault_group_node1695881254414 = SelectFromCollection.apply(\n    dfc=ConditionalRouter_node1695881254287,\n    key=\"default_group\",\n    transformation_ctx=\"default_group_node1695881254414\",\n)\n\n# Script generated for node Change Schema\nChangeSchema_node1695881702941 = ApplyMapping.apply(\n    frame=default_group_node1695881254414,\n    mappings=[\n        (\"poster_link\", \"string\", \"poster_link\", \"string\"),\n        (\"series_title\", \"string\", \"series_title\", \"string\"),\n        (\"released_year\", \"string\", \"released_year\", \"string\"),\n        (\"certificate\", \"string\", \"certificate\", \"string\"),\n        (\"runtime\", \"string\", \"runtime\", \"string\"),\n        (\"genre\", \"string\", \"genre\", \"string\"),\n        (\"imdb_rating\", \"double\", \"imdb_rating\", \"double\"),\n        (\"overview\", \"string\", \"overview\", \"string\"),\n        (\"meta_score\", \"int\", \"meta_score\", \"int\"),\n        (\"director\", \"string\", \"director\", \"string\"),\n        (\"star1\", \"string\", \"star1\", \"string\"),\n        (\"star2\", \"string\", \"star2\", \"string\"),\n        (\"star3\", \"string\", \"star3\", \"string\"),\n        (\"star4\", \"string\", \"star4\", \"string\"),\n        (\"no_of_votes\", \"int\", \"no_of_votes\", \"int\"),\n        (\"gross\", \"string\", \"gross\", \"string\"),\n    ],\n    transformation_ctx=\"ChangeSchema_node1695881702941\",\n)\n\n# Script generated for node Amazon S3\nAmazonS3_node1695881164928 = glueContext.write_dynamic_frame.from_options(\n    frame=ruleOutcomes_node1695880720380,\n    connection_type=\"s3\",\n    format=\"json\",\n    connection_options={\n        \"path\": \"s3://imdb-dataquality/rules-outcome/\",\n        \"partitionKeys\": [],\n    },\n    transformation_ctx=\"AmazonS3_node1695881164928\",\n)\n\n# Script generated for node Amazon S3\nAmazonS3_node1695881567005 = glueContext.write_dynamic_frame.from_options(\n    frame=failed_output_node1695881254415,\n    connection_type=\"s3\",\n    format=\"json\",\n    connection_options={\n        \"path\": \"s3://imdb-dataquality/bad-records/\",\n        \"compression\": \"snappy\",\n        \"partitionKeys\": [],\n    },\n    transformation_ctx=\"AmazonS3_node1695881567005\",\n)\n\n# Script generated for node Amazon Redshift\nAmazonRedshift_node1695881914925 = glueContext.write_dynamic_frame.from_options(\n    frame=ChangeSchema_node1695881702941,\n    connection_type=\"redshift\",\n    connection_options={\n        \"redshiftTmpDir\": \"s3://aws-glue-assets-683934273415-ap-south-1/temporary/\",\n        \"useConnectionProperties\": \"true\",\n        \"dbtable\": \"imdb.imdb_movies_rating\",\n        \"connectionName\": \"glue2redshift\",\n        \"preactions\": \"CREATE TABLE IF NOT EXISTS imdb.imdb_movies_rating (poster_link VARCHAR, series_title VARCHAR, released_year VARCHAR, certificate VARCHAR, runtime VARCHAR, genre VARCHAR, imdb_rating DOUBLE PRECISION, overview VARCHAR, meta_score INTEGER, director VARCHAR, star1 VARCHAR, star2 VARCHAR, star3 VARCHAR, star4 VARCHAR, no_of_votes INTEGER, gross VARCHAR);\",\n    },\n    transformation_ctx=\"AmazonRedshift_node1695881914925\",\n)\n\njob.commit()\n"
}